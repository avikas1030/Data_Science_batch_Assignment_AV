# Q1. Explain Class and Object with respect to Object-Oriented Programming. Give a suitable example.
# In Object-Oriented Programming (OOP), a class is a blueprint for creating objects. A class defines a set of attributes and methods that the created objects will have. An object is an instance of a class, and it represents a specific realization of the class.

# Example:
class Dog:
    def __init__(self, name, age):
        self.name = name  # Attribute
        self.age = age    # Attribute

    def bark(self):       # Method
        return "Woof!"

# Creating an object (instance) of the Dog class
my_dog = Dog("Buddy", 3)
print(my_dog.name)  # Output: Buddy
print(my_dog.bark())  # Output: Woof!

# Q2. Name the four pillars of OOPs.
# The four pillars of Object-Oriented Programming (OOP) are:
# 1. Encapsulation
# 2. Inheritance
# 3. Polymorphism
# 4. Abstraction

# Q3. Explain why the __init__() function is used. Give a suitable example.
# The __init__() function in Python is known as the constructor method. It is automatically called when a class is being instantiated (i.e., when an object is created). It is used to initialize the attributes of the class.

# Example:
class Person:
    def __init__(self, name, age):
        self.name = name  # Initialize attribute 'name'
        self.age = age    # Initialize attribute 'age'

# Creating an object of the Person class
person = Person("Alice", 30)
print(person.name)  # Output: Alice
print(person.age)   # Output: 30

# Q4. Why self is used in OOPs?
# The self keyword in Python is used to represent the instance of the class. It allows access to the attributes and methods of the class in Python. It differentiates instance variables from local variables within methods.

# Example:
class Cat:
    def __init__(self, name):
        self.name = name  # 'self' refers to the instance attribute 'name'

    def meow(self):
        return f"{self.name} says Meow!"

# Creating an object of the Cat class
my_cat = Cat("Whiskers")
print(my_cat.meow())  # Output: Whiskers says Meow!

# Q5. What is inheritance? Give an example for each type of inheritance.
# Inheritance is a feature in OOP that allows a class to inherit attributes and methods from another class. It promotes code reuse and establishes a relationship between classes.

# Types of inheritance:
# 1. Single Inheritance
class Animal:
    def speak(self):
        return "Animal sound"

class Dog(Animal):  # Dog inherits from Animal
    def bark(self):
        return "Woof!"

# Example
my_dog = Dog()
print(my_dog.speak())  # Output: Animal sound
print(my_dog.bark())   # Output: Woof!

# 2. Multiple Inheritance
class Father:
    def traits(self):
        return "Father's traits"

class Mother:
    def traits(self):
        return "Mother's traits"

class Child(Father, Mother):  # Child inherits from Father and Mother
    def both_traits(self):
        return f"{self.traits()} and {self.traits()}"

# Example
child = Child()
print(child.both_traits())  # Output: Mother's traits and Father's traits

# 3. Hierarchical Inheritance
class Vehicle:
    def type(self):
        return "Vehicle type"

class Car(Vehicle):  # Car inherits from Vehicle
    def brand(self):
        return "Car brand"

class Bike(Vehicle):  # Bike inherits from Vehicle
    def model(self):
        return "Bike model"

# Example
my_car = Car()
my_bike = Bike()
print(my_car.type())  # Output: Vehicle type
print(my_bike.type())  # Output: Vehicle type

# 4. Hybrid Inheritance
class Base:
    def base_method(self):
        return "Base method"

class Derived1(Base):
    def derived1_method(self):
        return "Derived1 method"

class Derived2(Base):
    def derived2_method(self):
        return "Derived2 method"

class Hybrid(Derived1, Derived2):  # Hybrid inherits from Derived1 and Derived2, both of which inherit from Base
    def hybrid_method(self):
        return "Hybrid method"

# Example
hybrid_obj = Hybrid()
print(hybrid_obj.base_method())  # Output: Base method
print(hybrid_obj.derived1_method())  # Output: Derived1 method
print(hybrid_obj.derived2_method())  # Output: Derived2 method
print(hybrid_obj.hybrid_method())  # Output: Hybrid method
