# Q1. Which keyword is used to create a function? Create a function to return a list of odd numbers in the range of 1 to 25.
# The keyword used to create a function is `def`.
def odd_numbers():
    return [x for x in range(1, 26) if x % 2 != 0]

print(odd_numbers())  # Output: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]

# Q2. Why *args and **kwargs is used in some functions? Create a function each for *args and **kwargs to demonstrate their use.
# *args is used to pass a variable number of positional arguments.
# **kwargs is used to pass a variable number of keyword arguments.

def func_args(*args):
    return args

def func_kwargs(**kwargs):
    return kwargs

print(func_args(1, 2, 3, 4))  # Output: (1, 2, 3, 4)
print(func_kwargs(a=1, b=2, c=3))  # Output: {'a': 1, 'b': 2, 'c': 3}

# Q3. What is an iterator in python? Name the method used to initialise the iterator object and the method used for iteration. Use these methods to print the first five elements of the given list [2, 4, 6, 8, 10, 12, 14, 16, 18, 20].
# An iterator in Python is an object that implements the iterator protocol with methods __iter__() and __next__().
# To initialize an iterator, use the iter() method. To iterate, use the next() method.

my_list = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
iterator = iter(my_list)
for _ in range(5):
    print(next(iterator))  # Output: 2, 4, 6, 8, 10

# Q4. What is a generator function in python? Why yield keyword is used? Give an example of a generator function.
# A generator function in Python uses the `yield` keyword to produce a series of values over time, allowing iteration through its values one at a time.
# The `yield` keyword is used to pause the function and return a value, while preserving the function's state.

def count_up_to(max):
    count = 1
    while count <= max:
        yield count
        count += 1

# Example usage
gen = count_up_to(5)
for number in gen:
    print(number)  # Output: 1, 2, 3, 4, 5

# Q5. Create a generator function for prime numbers less than 1000. Use the next() method to print the first 20 prime numbers.
def primes_less_than_1000():
    def is_prime(n):
        if n <= 1:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    num = 2
    while num < 1000:
        if is_prime(num):
            yield num
        num += 1

# Example usage
prime_gen = primes_less_than_1000()
for _ in range(20):
    print(next(prime_gen))

# Q6. Write a python program to print the first 10 Fibonacci numbers using a while loop.
a, b = 0, 1
count = 0
while count < 10:
    print(a, end=' ')
    a, b = b, a + b
    count += 1
# Output: 0 1 1 2 3 5 8 13 21 34

# Q7. Write a List Comprehension to iterate through the given string: ‘pwskills’. Expected output: ['p', 'w', 's', 'k', 'i', 'l', 'l', 's']
string = 'pwskills'
list_comprehension = [char for char in string]
print(list_comprehension)  # Output: ['p', 'w', 's', 'k', 'i', 'l', 'l', 's']

# Q8. Write a python program to check whether a given number is Palindrome or not using a while loop.
def is_palindrome(n):
    original = n
    reversed_number = 0
    while n > 0:
        digit = n % 10
        reversed_number = reversed_number * 10 + digit
        n //= 10
    return original == reversed_number

number = 12321
print(is_palindrome(number))  # Output: True (for 12321)

# Q9. Write a code to print odd numbers from 1 to 100 using list comprehension.
odd_numbers = [num for num in range(1, 101) if num % 2 != 0]
print(odd_numbers)
# Output: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]
